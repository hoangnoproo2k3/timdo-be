---
description: 
globs: 
alwaysApply: false
---
NestJS Cursor Rules for API Development with Prisma (Best Practices 2025)
These rules ensure Cursor AI generates clean, maintainable, and scalable NestJS APIs using Prisma as the ORM, following 2025 best practices.
General Guidelines

Use TypeScript for type safety and maintainability.
Follow NestJS module-based architecture: Organize code into modules, controllers, services, and DTOs.
Use RESTful API conventions (e.g., /users for collections, /users/:id for specific resources).
Apply API versioning using URI prefix (e.g., /v1/users).
Naming conventions:
PascalCase for class names (e.g., UsersService).
camelCase for variables and methods (e.g., findOne).
UPPER_SNAKE_CASE for constants (e.g., DEFAULT_PAGE_SIZE).



File Structure

Place module-related files in src/modules/<module>/ (e.g., src/modules/users/).
Structure for each module:src/
└── modules/
    └── users/
        ├── dto/
        │   ├── create-user.dto.ts
        │   ├── update-user.dto.ts
        │   └── user.dto.ts
        ├── services/
        │   ├── users.service.ts
        │   ├── user-utils.service.ts (optional for helper functions)
        ├── users.controller.ts
        └── users.module.ts


Prisma schema is in prisma/schema.prisma.
Services folder: Store main service (users.service.ts) and optional helper services (e.g., user-utils.service.ts) for complex logic.

Controllers

Use @Controller('v1/<resource>') for versioned endpoints (e.g., @Controller('v1/users')).
Use RESTful HTTP methods: @Get(), @Post(), @Patch(), @Delete().
Keep controllers thin: Only handle HTTP requests/responses, delegate logic to services.
Return DTOs to control response structure.
Use Swagger (@nestjs/swagger) for API documentation.
Example:
import { Controller, Get, Post, Body, Param } from '@nestjs/common';
import { UsersService } from './services/users.service';
import { CreateUserDto, UserDto } from './dto';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';

@ApiTags('users')
@Controller('v1/users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  @Post()
  @ApiOperation({ summary: 'Create a new user' })
  @ApiResponse({ status: 201, description: 'User created', type: UserDto })
  async create(@Body() createUserDto: CreateUserDto): Promise<UserDto> {
    return this.usersService.create(createUserDto);
  }

  @Get(':id')
  @ApiOperation({ summary: 'Get a user by ID' })
  @ApiResponse({ status: 200, description: 'User found', type: UserDto })
  async findOne(@Param('id') id: string): Promise<UserDto> {
    return this.usersService.findOne(id);
  }
}



Services

Use @Injectable() for all services.
Handle all business logic, validation, and Prisma database operations in services (no repositories).
Inject PrismaService via constructor-based Dependency Injection.
Allow splitting logic into separate files in services/ (e.g., user-utils.service.ts for DTO mapping or complex queries).
Use async/await for asynchronous operations.
Example:
import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from '../../prisma/prisma.service';
import { CreateUserDto, UserDto } from '../dto';

@Injectable()
export class UsersService {
  constructor(private readonly prisma: PrismaService) {}

  async create(createUserDto: CreateUserDto): Promise<UserDto> {
    const user = await this.prisma.user.create({
      data: createUserDto,
    });
    return this.toDto(user);
  }

  async findOne(id: string): Promise<UserDto> {
    const user = await this.prisma.user.findUnique({
      where: { id: parseInt(id) },
    });
    if (!user) throw new NotFoundException(`User with ID ${id} not found`);
    return this.toDto(user);
  }

  private toDto(user: any): UserDto {
    const userDto = new UserDto();
    userDto.id = user.id;
    userDto.email = user.email;
    return userDto;
  }
}


Helper Service Example (for complex logic):
import { Injectable } from '@nestjs/common';
import { UserDto } from '../dto';

@Injectable()
export class UserUtilsService {
  mapToDto(user: any): UserDto {
    const userDto = new UserDto();
    userDto.id = user.id;
    userDto.email = user.email;
    return userDto;
  }
}

Inject into UsersService if needed:constructor(
  private readonly prisma: PrismaService,
  private readonly userUtils: UserUtilsService,
) {}



DTOs (Data Transfer Objects)

Define DTOs in dto/ for request and response payloads.
Use class-validator and class-transformer for validation and transformation.
Example:
import { IsString, IsEmail, MinLength } from 'class-validator';

export class CreateUserDto {
  @IsEmail()
  email: string;

  @IsString()
  @MinLength(6)
  password: string;
}

export class UserDto {
  id: number;
  email: string;
}



Error Handling

Use NestJS built-in exceptions (e.g., NotFoundException, BadRequestException) for standard HTTP errors.
Create custom exceptions only for specific business cases (e.g., UserAlreadyExistsException).
Implement a global exception filter to standardize error responses.
Error response structure:{
  "statusCode": <HTTP_STATUS>,
  "message": "<Error message>",
  "errors": [{ "field": "<Field name>", "message": "<Field error>" }],
  "timestamp": "<ISO timestamp>",
  "path": "<Request path>"
}


Example global exception filter:
import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';
import { Request, Response } from 'express';

@Catch()
export class AllExceptionsFilter implements ExceptionFilter {
  catch(exception: unknown, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse<Response>();
    const request = ctx.getRequest<Request>();
    const status = exception instanceof HttpException ? exception.getStatus() : 500;
    const message = exception instanceof HttpException ? exception.message : 'Internal server error';
    const errors = exception instanceof HttpException ? exception.getResponse() : null;

    response.status(status).json({
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: request.url,
      message,
      errors: typeof errors === 'object' ? errors : null,
    });
  }
}


Apply in main.ts:app.useGlobalFilters(new AllExceptionsFilter());



Validation

Use ValidationPipe globally with exceptionFactory to handle validation errors.
Return all validation errors, not just the first one.
Use class-validator and class-transformer for DTO validation.
Example GlobalValidationPipe:
import { BadRequestException, ValidationPipe } from '@nestjs/common';
import { ValidationError } from 'class-validator';

export const GlobalValidationPipe = new ValidationPipe({
  transform: true,
  whitelist: true,
  forbidNonWhitelisted: true,
  validationError: { target: false },
  exceptionFactory: (validationErrors: ValidationError[] = []) => {
    const errors = validationErrors.map((error) => {
      const constraints = error.constraints || {};
      const message = Object.values(constraints)[0] || 'Validation failed';
      return {
        field: error.property,
        message,
      };
    });

    return new BadRequestException({
      statusCode: 400,
      message: 'Validation failed',
      errors,
    });
  },
});


Apply in main.ts:app.useGlobalPipes(GlobalValidationPipe);



API Versioning

Use URI versioning (e.g., /v1/users).
Configure in main.ts:
import { VersioningType } from '@nestjs/common';

app.enableVersioning({
  type: VersioningType.URI,
  defaultVersion: '1',
});



Testing

Generate unit tests for controllers and services in *.spec.ts files.
Use @nestjs/testing for testing modules.
Mock PrismaService for database operations.
Example:
import { Test, TestingModule } from '@nestjs/testing';
import { UsersService } from './services/users.service';
import { PrismaService } from '../../prisma/prisma.service';

describe('UsersService', () => {
  let service: UsersService;
  let prisma: PrismaService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UsersService,
        {
          provide: PrismaService,
          useValue: {
            user: {
              create: jest.fn(),
              findUnique: jest.fn(),
            },
          },
        },
      ],
    }).compile();

    service = module.get<UsersService>(UsersService);
    prisma = module.get<PrismaService>(PrismaService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});



Prisma Integration

Use @nestjs/prisma for Prisma integration.
Inject PrismaService into services for database operations.
Example PrismaService setup:
import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { PrismaClient } from '@prisma/client';

@Injectable()
export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
  async onModuleInit() {
    await this.$connect();
  }

  async onModuleDestroy() {
    await this.$disconnect();
  }
}


Configure in module:
import { Module } from '@nestjs/common';
import { PrismaModule } from '../../prisma/prisma.module';
import { UsersController } from './users.controller';
import { UsersService } from './services/users.service';
import { UserUtilsService } from './services/user-utils.service';

@Module({
  imports: [PrismaModule],
  controllers: [UsersController],
  providers: [UsersService, UserUtilsService],
})
export class UsersModule {}



Additional Rules

Use ESLint and Prettier for code formatting and linting.
Follow SOLID principles, especially Single Responsibility Principle (SRP).
Keep controllers thin; all logic resides in services.
Use environment variables with @nestjs/config for configuration.
Implement logging with @nestjs/common Logger for debugging.
Avoid over-engineering: Only add helper services or split logic when complexity justifies it.

When to Apply These Rules

Apply to all TypeScript files in src/ (glob: src/**/*.ts).
Ignore test files (*.spec.ts) for code generation rules but include them for test generation.

Example Prompt for Cursor
When asked to generate a new NestJS API endpoint:

Create a new module in src/modules/ with the above structure.
Generate controller, service, and DTOs.
Place all database logic (Prisma) in services, inject PrismaService.
Allow splitting complex logic into helper services in services/.
Place DTOs in dto/.
Include Swagger documentation and validation.
Add unit tests for controller and service.
Ensure versioned endpoints and proper error handling.

