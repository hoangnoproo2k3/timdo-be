generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  LOST
  FOUND
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentStatus {
  PENDING
  UNPAID
  PAID
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum ReportStatus {
  PENDING
  RESOLVED
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum SubscriptionAction {
  NEW
  RENEW
  UPGRADE
}

enum PackageType {
  FREE
  PRIORITY
  EXPRESS
  VIP
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique @db.VarChar(255)
  password          String?            @db.VarChar(255)
  googleId          String?            @unique
  username          String             @db.VarChar(100)
  role              Role               @default(USER)
  avatarUrl         String?            @db.VarChar(255)
  posts             Post[]
  articles          Article[]
  comments          Comment[]
  likes             Like[]
  reports           Report[]           @relation("UserReports")
  notifications     Notification[]
  payments          Payment[]
  postSubscriptions PostSubscription[]
  boostTransactions BoostTransaction[]
  RefreshToken      RefreshToken[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Post {
  id                Int                @id @default(autoincrement())
  title             String             @db.VarChar(255)
  slug              String             @unique @db.VarChar(255)
  description       String             @db.Text
  postType          PostType
  status            PostStatus         @default(PENDING)
  rejectionReason   String?            @db.Text
  location          String?
  address           String?            @db.VarChar(255)
  phoneNumber       String?            @db.VarChar(20)
  category          String?            @db.VarChar(100)
  date              DateTime?
  user              User               @relation(fields: [userId], references: [id])
  userId            Int
  comments          Comment[]
  likes             Like[]
  tags              Tag[]              @relation("PostTags")
  media             Media[]
  reports           Report[]           @relation("PostReports")
  postSubscriptions PostSubscription[]
  viewCount         Int                @default(0)
  // Boost related fields (separate from subscriptions)
  isBoosted         Boolean            @default(false)
  boostUntil        DateTime?
  lastBoostedAt     DateTime?
  boostTransactions BoostTransaction[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@index([userId])
  @@index([postType, location])
  @@index([isBoosted])
}

model Article {
  id        Int           @id @default(autoincrement())
  title     String        @db.VarChar(255)
  slug      String        @unique @db.VarChar(255)
  content   String        @db.Text
  excerpt   String?       @db.Text
  status    ArticleStatus @default(DRAFT)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  Comment[]
  likes     Like[]
  tags      Tag[]         @relation("ArticleTags")
  media     Media[]
  reports   Report[]      @relation("ArticleReports")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([userId])
  @@index([status])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([articleId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())

  @@unique([userId, postId, articleId])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  posts     Post[]    @relation("PostTags")
  articles  Article[] @relation("ArticleTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  type      String   @db.VarChar(50)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
}

model ServicePackage {
  id                Int                @id @default(autoincrement())
  name              String             @unique @db.VarChar(100)
  description       String?            @db.Text
  price             Float
  duration          Int
  packageType       PackageType        @default(FREE)
  position          Int                @default(0)
  features          String?            @db.Text
  postSubscriptions PostSubscription[]
  payments          Payment[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// This model tracks the main package subscription for a post and its history
model PostSubscription {
  id                Int                @id @default(autoincrement())
  post              Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId            Int
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  package           ServicePackage     @relation(fields: [packageId], references: [id], onDelete: Restrict)
  packageId         Int
  action            SubscriptionAction @default(NEW) // NEW, RENEW, UPGRADE
  startDate         DateTime           @default(now())
  endDate           DateTime
  previousPackageId Int? // For tracking upgrades - what was the previous package
  previousEndDate   DateTime? // For tracking renewals - when the previous subscription would have ended
  status            SubscriptionStatus @default(ACTIVE)
  payment           Payment?
  isAutoRenew       Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([packageId])
  @@index([status])
}

// Payment can be associated with a package subscription or a boost transaction
model Payment {
  id            Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  amount        Float
  proofImageUrl String? @db.VarChar(255)

  // For package subscriptions
  package            ServicePackage?   @relation(fields: [packageId], references: [id], onDelete: SetNull)
  packageId          Int?
  postSubscription   PostSubscription? @relation(fields: [postSubscriptionId], references: [id], onDelete: SetNull)
  postSubscriptionId Int?              @unique // One payment per subscription

  // For boost transactions
  boostTransaction   BoostTransaction? @relation(fields: [boostTransactionId], references: [id], onDelete: SetNull)
  boostTransactionId Int?              @unique // One payment per boost transaction

  transactionId String?       @unique @db.VarChar(255)
  paymentType   String        @default("PACKAGE") // PACKAGE or BOOST
  status        PaymentStatus @default(PENDING)
  paidAt        DateTime?
  cancelledAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId])
  @@index([packageId])
  @@index([status])
}

// Separate model for boost transactions
model BoostTransaction {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  price     Float
  duration  Int
  startDate DateTime @default(now())
  endDate   DateTime
  payment   Payment?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
  @@index([isActive])
}

model Report {
  id         Int          @id @default(autoincrement())
  reporter   User         @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId Int
  reason     String       @db.Text
  post       Post?        @relation("PostReports", fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  article    Article?     @relation("ArticleReports", fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([postId])
  @@index([articleId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
