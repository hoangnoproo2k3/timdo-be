generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostType {
  LOST
  FOUND
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

enum ReportStatus {
  PENDING
  RESOLVED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique @db.VarChar(255)
  password      String?        @db.VarChar(255)
  googleId      String?        @unique
  username      String         @db.VarChar(100)
  role          Role           @default(USER)
  avatarUrl     String?        @db.VarChar(255)
  posts         Post[]
  articles      Article[]
  comments      Comment[]
  likes         Like[]
  reports       Report[]       @relation("UserReports")
  notifications Notification[]
  payments      Payment[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  RefreshToken  RefreshToken[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  slug          String         @unique @db.VarChar(255)
  description   String         @db.Text
  postType      PostType
  status        PostStatus     @default(PENDING)
  location      String?
  address       String?        @db.VarChar(255)
  phoneNumber   String?        @db.VarChar(20)
  category      String?        @db.VarChar(100)
  date          DateTime?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  comments      Comment[]
  likes         Like[]
  tags          Tag[]          @relation("PostTags")
  media         Media[]
  reports       Report[]       @relation("PostReports")
  subscriptions Subscription[]
  isPromoted    Boolean        @default(false)
  promoteUntil  DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?

  @@index([userId])
  @@index([postType, location])
}

model Article {
  id              Int           @id @default(autoincrement())
  title           String        @db.VarChar(255)
  slug            String        @unique @db.VarChar(255)
  content         String        @db.Text
  excerpt         String?       @db.Text
  status          ArticleStatus @default(DRAFT)
  views           Int           @default(0)
  featuredImage   String?       @db.VarChar(255)
  metaTitle       String?       @db.VarChar(255)
  metaDescription String?       @db.Text
  publishedAt     DateTime?
  readingTime     Int?          @default(0)
  isFeatured      Boolean       @default(false)
  user            User          @relÄ‘ocation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  comments        Comment[]
  likes           Like[]
  tags            Tag[]         @relation("ArticleTags")
  media           Media[]
  reports         Report[]      @relation("ArticleReports")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([isFeatured])
  @@index([publishedAt])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([articleId])
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())

  @@unique([userId, postId, articleId])
}

model Tag {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(100)
  slug      String    @unique @db.VarChar(100)
  posts     Post[]    @relation("PostTags")
  articles  Article[] @relation("ArticleTags")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Media {
  id        Int      @id @default(autoincrement())
  url       String   @db.VarChar(255)
  type      String   @db.VarChar(50)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int?
  createdAt DateTime @default(now())
}

model ServicePackage {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.VarChar(100)
  price         Float
  duration      Int
  subscriptions Subscription[]
  payments      Payment[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Subscription {
  id        Int                @id @default(autoincrement())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  package   ServicePackage     @relation(fields: [packageId], references: [id], onDelete: Restrict)
  packageId Int
  startDate DateTime           @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([postId])
}

model Payment {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  package       ServicePackage @relation(fields: [packageId], references: [id], onDelete: Restrict)
  packageId     Int
  amount        Float
  transactionId String?        @unique @db.VarChar(255)
  status        String         @default("PENDING")
  paidAt        DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Report {
  id         Int          @id @default(autoincrement())
  reporter   User         @relation("UserReports", fields: [reporterId], references: [id], onDelete: Cascade)
  reporterId Int
  reason     String       @db.Text
  post       Post?        @relation("PostReports", fields: [postId], references: [id], onDelete: Cascade)
  postId     Int?
  article    Article?     @relation("ArticleReports", fields: [articleId], references: [id], onDelete: Cascade)
  articleId  Int?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([postId])
  @@index([articleId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
